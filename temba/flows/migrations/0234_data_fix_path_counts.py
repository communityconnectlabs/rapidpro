# Generated by Django 2.2.4 on 2020-12-02 19:22

from django.db import migrations
from django.db.migrations import RunPython

from ..merging.merging import GraphDifferenceMap, Graph


def recheck_origin_uuids_and_update_path_counts(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    MergeFlowsTask = apps.get_model("flows", "MergeFlowsTask")
    FlowPathCount = apps.get_model("flows", "FlowPathCount")
    FlowPathRecentRun = apps.get_model("flows", "FlowPathRecentRun")
    tasks = MergeFlowsTask.objects.using(db_alias).filter(status="C")
    tasks_count = len(tasks)
    for index, task in enumerate(tasks, start=1):
        print(f"Fixing path counts for task {task.uuid} ({index}/{tasks_count})")
        source_definition = task.source.revisions.order_by("revision").last().definition
        target_definition = task.target.revisions.order_by("revision").last().definition

        target_exit_uuids = []
        target_node_uuids = []
        for node in target_definition.get("nodes", []):
            target_node_uuids.append(node.get("uuid"))
            target_exit_uuids.extend([exit_.get("uuid") for exit_ in node.get("exits", [])])

        mistaken_path_counts = task.target.path_counts.exclude(
            from_uuid__in=target_exit_uuids, to_uuid__in=target_node_uuids
        )
        mistaken_path_runs_counts = (
            FlowPathRecentRun.objects.using(db_alias)
            .filter(run__flow=task.target)
            .exclude(from_uuid__in=target_exit_uuids, to_uuid__in=target_node_uuids)
        )

        if mistaken_path_counts or mistaken_path_runs_counts:
            diff_map = GraphDifferenceMap(Graph(resource=source_definition), Graph(resource=target_definition))
            diff_map.compare_graphs()
            origin_node_uuids = {node_uuid: node.uuid for node_uuid, node in diff_map.diff_nodes_origin_map.items()}
            origin_exit_uuids = {
                origin_uuid: new_uuid
                for node in diff_map.diff_nodes_map.values()
                for origin_uuid, new_uuid in node.origin_exits_map.items()
            }
            updated_path_counts = []
            for path_count in mistaken_path_counts:
                path_count.from_uuid = origin_exit_uuids.get(str(path_count.from_uuid), path_count.from_uuid)
                path_count.to_uuid = origin_node_uuids.get(str(path_count.to_uuid), path_count.to_uuid)
                updated_path_counts.append(path_count)

            FlowPathCount.objects.using(db_alias).bulk_update(updated_path_counts, ["from_uuid", "to_uuid"])
            print(f"(FlowPathCount) Updated {len(updated_path_counts)} rows.")

            updated_path_runs_count, chunk_size, chunk_counter = [], 20000, 0
            for path_count in mistaken_path_runs_counts:
                path_count.from_uuid = origin_exit_uuids.get(str(path_count.from_uuid), path_count.from_uuid)
                path_count.to_uuid = origin_node_uuids.get(str(path_count.to_uuid), path_count.to_uuid)
                updated_path_runs_count.append(path_count)
                chunk_counter += 1
                if chunk_counter == chunk_size:
                    chunk_counter = 0
                    FlowPathRecentRun.objects.using(db_alias).bulk_update(
                        updated_path_runs_count, ["from_uuid", "to_uuid"]
                    )
                    print(f"(FlowPathRecentRun) Updated {chunk_size} rows.")
            else:
                # Save last uncompleted chunk
                FlowPathRecentRun.objects.using(db_alias).bulk_update(
                    updated_path_runs_count, ["from_uuid", "to_uuid"]
                )
                print(f"(FlowPathRecentRun) Updated {len(updated_path_counts)} rows.")
        else:
            print("Mistaken paths were not found.")


class Migration(migrations.Migration):
    dependencies = [("flows", "0233_auto_20201029_1736")]

    operations = [RunPython(recheck_origin_uuids_and_update_path_counts)]
