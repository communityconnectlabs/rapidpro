-extends 'smartmin/form.html'
-load i18n smartmin


-block extra-script
  {{ block.super }}
  <script src="{% url 'django.views.i18n.javascript_catalog' %}"></script>

  :javascript
    const messageTemplate = 'Are you sure you want to schedule the flow "{flowName}", to {groupCount} groups with an interval of {batchInterval} minutes?'

    function onSuccess(form, htmlString, status, jqXHR) {
      const requiredFields = ['#trigger_flow', '#trigger_omnibox', '#schedule-options']
      handleSubmissionResponse(requiredFields, form, { htmlString, status, jqXHR });
    }

    document.addEventListener("DOMContentLoaded", function() {
      const formContainer = document.querySelector('#id-trigger-schedule-in-batch');
      const repeatPeriod = formContainer.querySelector("#id_schedule_repeat_period");
      const tembaField = formContainer.querySelector('#id_schedule_omnibox').shadowRoot
        .querySelector('temba-select').shadowRoot
        .querySelector('temba-field');

      const helpTextNode = document.createElement('div');
      const textNode = document.createTextNode('The batches will deploy in the order you add the group');
      helpTextNode.appendChild(textNode);
      helpTextNode.setAttribute('style', 'font-size: 11px; margin-top: 6px; opacity: 1;');
      tembaField.appendChild(helpTextNode);
      const label = tembaField.shadowRoot.querySelector('label');
      label.innerHTML = 'Groups';

      lockScheduleDate(formContainer);

      if (repeatPeriod) {
        repeatPeriod.addEventListener("change", function(event) {
          const currentRepeat = event.currentTarget.values[0].value;
          if (currentRepeat === 'W') {
            formContainer.querySelector("div.weekly-repeat-options").classList.remove("hidden");
          } else {
            formContainer.querySelector("div.weekly-repeat-options").classList.add("hidden");
          }
        });
      }

      let inBatchConfirmation = document.querySelector("#bulk-schedule-confirmation");
      const section =  $('#id-trigger-schedule-in-batch');
      const form = section.find('form');
      const flowOptionList = document.querySelector('#id_schedule_flow').querySelectorAll('[name]');
      const flowById = {};
      flowOptionList.forEach(function(node) {
        flowById[node.getAttribute('value').toString()] = node.getAttribute('name');
      });

      let doNotContactDialog = document.querySelector("#do-not-contact-dialog");
      doNotContactDialog.addEventListener("temba-button-clicked", function(event) {
        if (!event.detail.button.secondary) {
          doNotContactDialog.open = false;
          inBatchConfirmation.classList.remove("hide");
          inBatchConfirmation.open = true;
        }
      });

      form.off("submit").on("submit", function(e) {
        e.preventDefault();
        const formDataByName = buildFormData(form)

        const modalMessage = $('#bulk-schedule-confirmation').find('div.p-6');
        const flowName = flowById[formDataByName.flow];
        const selectedGroups = (formDataByName.omnibox || []).length;
        const message = messageTemplate
          .replace('{flowName}', flowName || '--')
          .replace('{groupCount}', String(selectedGroups))
          .replace('{batchInterval}', formDataByName.batch_interval)

        modalMessage.text(message);
        if ("{{ user_org.do_not_contact_enabled }}" === "True" && formDataByName.start_datetime && formDataByName.start_datetime.length) {
          let time = parseInt(formDataByName.start_datetime.split(" ")[1].split(":")[0]);
          if (time < 8 || time > 20) {
            doNotContactDialog.open = true;
            return;
          }
        }
        inBatchConfirmation.classList.remove("hide");
        inBatchConfirmation.open = true;
      });

      inBatchConfirmation.addEventListener("temba-button-clicked", function(event) {
        const container = "#id-trigger-schedule-in-batch > .formax-container";
        const groupIds = (buildFormData(form)['omnibox'] || []).map(row => JSON.parse(row).id);
        const appendToForm = '&group_order=' + encodeURIComponent(JSON.stringify(groupIds));
        const options = {
          form, container, successFunc: onSuccess, appendToForm, postUrl: '/trigger/schedule_in_batch/'
        };
        if (!event.detail.button.secondary) submitFormData(options);
        inBatchConfirmation.classList.add("hide");
        inBatchConfirmation.open = false;
      });
    });


-block fields
  #trigger_flow
    - render_field 'flow'
  #trigger_omnibox
    - render_field 'omnibox'
  #schedule-options
    -render_field 'start_datetime'
  #recurrence
    .repeat-period
      -render_field 'repeat_period'
    .weekly-repeat-options{class:'{% if form.repeat_period.value == "W" %}{% else%}hidden{%endif%}'}
      -render_field 'repeat_days_of_week'
  #batch_interval
    -render_field 'batch_interval'
  %h5.embedded-data-schedule-in-batch.hidden
    -trans "Flow Parameters"
  #embedded-data-schedule-in-batch.hidden
    #embed-container-schedule-in-batch


  %temba-dialog#bulk-schedule-confirmation.hide(header='{{ _("Bulk Schedule Confirmation")|escapejs }}' primaryButtonName='{{ _("Confirm")|escapejs }}' destructive='true')
    .p-6

  %temba-dialog#do-not-contact-dialog(header='{{ _("Out of Business Hours Warning")|escapejs }}' primaryButtonName='{{ _("Confirm")|escapejs }}' destructive='true')
    .p-6
      {{ _("You are trying to send a message out of compliance hours (8AM - 9PM). Are you sure you want to continue?") }}


-block summary
  -trans "Start a flow in the future or on a schedule in batches."
