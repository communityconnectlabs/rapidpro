{% extends "smartmin/base.html" %}

-load compress temba i18n

-block page-title
  {{object.name}}

-block extra-style
  %link{rel:'stylesheet', href:'https://fonts.googleapis.com/css?family=Roboto+Mono:300|Roboto:300,400,500'}

  -for css in styles
    %link{rel:'stylesheet', type:'text/css', href:'{{css}}'}

  :css
    body {
      line-height: inherit;
    }

    h2 .icon-phone {
      width: 40px;
    }

    h2 .icon-mobile {
      width: 40px;
    }

    #header *, #top-menu *, .org-header * {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      z-index: 0;
      position: relative;
    }

    #rp-flow-editor input[type=text] {
      height: inherit !important;
      line-height: inherit;
    }

    #rp-flow-editor p {
      display: block;
      margin-block-start: 1em;
      margin-block-end: 1em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
    }

    .page-wrap:after {
      height: 0px;
    }

    #rp-flow-editor input {
      font-family: 'Roboto', sans-serif;
      font-size: 14px !important;
      font-weight: 300 !important;
    }

    #rp-flow-editor input:focus {
      box-shadow: none;
      outline: none;
      border: none;

    }

    #header {
      margin: 0;
    }

    #toolbar h2 {
      margin-top: -5px;
    }

    .org-header {
      z-index: 1000 !important;
    }

    #top-menu {
      z-index: inherit;
    }

    #top-menu.expanded {
      z-index: 3000 !important;
    }

    .gear-menu.open {
      z-index: 3000;
    }

    #toolbar {
      visibility: visible;
      position: relative;
      padding: 18px 30px;
      background-color: #f9f9f9;
      background-position: 13px 13px;
      background-image: linear-gradient(0deg, transparent 24%, rgba(61,177,255,0.15) 25%, rgba(61,177,255,0.15) 26%, transparent 27%, transparent 74%, rgba(61,177,255,0.15) 75%, rgba(61,177,255,0.15) 76%, transparent 77%, transparent),linear-gradient(90deg, transparent 24%, rgba(61,177,255,0.15) 25%, rgba(61,177,255,0.15) 26%, transparent 27%, transparent 74%, rgba(61,177,255,0.15) 75%, rgba(61,177,255,0.15) 76%, transparent 77%, transparent);
      background-size: 40px 40px;
    }

    #pending {
      position: relative;
      right: 0;
      width: 40%;
      height: 36px;
      margin: 0 auto;
      text-align: center;
    }

    #rp-flow-editor {
      visibility: visible;
      min-height: 1000px;
      width: 100%;
      
      background-color: #f9f9f9;
      background-position: 13px 13px;
      background-image: linear-gradient(0deg, transparent 24%, rgba(61,177,255,0.15) 25%, rgba(61,177,255,0.15) 26%, transparent 27%, transparent 74%, rgba(61,177,255,0.15) 75%, rgba(61,177,255,0.15) 76%, transparent 77%, transparent),linear-gradient(90deg, transparent 24%, rgba(61,177,255,0.15) 25%, rgba(61,177,255,0.15) 26%, transparent 27%, transparent 74%, rgba(61,177,255,0.15) 75%, rgba(61,177,255,0.15) 76%, transparent 77%, transparent);
      background-size: 40px 40px;
    }

    #rp-flow-editor > div {
      opacity: 0;
      transition: opacity 150ms linear;
    }

    #rp-flow-editor .language-selector {
      top: -15px !important;
    }

    rp-loading {
      margin-left: 30px;
      padding-top: 5px;
      display: block;
    }

    .select-invalid {
      border: 1px solid tomato;
      border-radius: 5px;
      box-shadow: 0 0 0 3px rgba(255,196,186,.5);
    }

    [class*="SendEmailForm_url"] input {
      margin-top: 0 !important;
    }


-block extra-script
  {{ block.super }}

  %script{type:'text/javascript', src:'{{ STATIC_URL }}js/html2canvas.min.js'}
  -for script in scripts
    %script{type:'text/javascript', src:'{{script}}'}

  :javascript
    const base = '/flow/assets/{{object.org.id}}/' + new Date().getTime() + '/';
    const api = '/api/v2/';

    // line up our flow types with goflow types
    var flowType = '{{object.flow_type}}';
    if (flowType == 'M') {
      flowType = 'message';
    } else if (flowType == 'V') {
      flowType = 'voice';
    } else if (flowType == 'S') {
      flowType = 'message_offline';
    }

    function handleEditorLoaded() {
      $('#rp-flow-editor > div').css('opacity', '1')
      $('[class*="components_printButton"]').click((e) => {
        e.stopPropagation(); // Prevent print to PDF call on this page.
        if ($.browser.mozilla) {
          // For Mozilla Firefox we use a different way of exporting because it correctly exports to PDF only the first page.
          let modal = new ConfirmationModal(gettext("Flow Export"), gettext("The current flow will be exported as an image."));
          modal.ele.find(".primary").click(() => {
            modal.setMessage(gettext("Exporting in progress..."));
            modal.ele.find('.loader').show();
            modal.ele.find('.modal-footer').hide();
            exportFlowAsImage(() => modal.dismiss());
          });
          modal.show();
        } else {
          // In all other case we use normal exporting.
          Object.assign(document.createElement('a'), {
            target: '_blank',
            href: '{% url "flows.flow_export_pdf" object.uuid %}'
          }).click();
        }
      })
    }

    function prepareDataForImageExport(documentCopy) {

      function replaceContent(element, content) {
        let newElement = documentCopy.createElement('span');
        newElement.innerHTML = content;
        element.parentNode.replaceChild(newElement, element);
      }

      documentCopy.querySelectorAll('[class*="fe-"]').forEach((el) => {
        if (el.className.includes('fe-paperclip')) {
          replaceContent(el, "📎");
        } else if (el.className.includes('fe-group')) {
          replaceContent(el, "👥");
        } else if (el.className.includes('fe-label')) {
          replaceContent(el, "🏷️");
        } else {
          replaceContent(el, "");
        }
      });
      documentCopy.querySelectorAll('[class*="Pill_pill"], [class*="Exit_name"]').forEach((el) => {
        el.style.fontSize = (parseFloat(window.getComputedStyle(el).fontSize) - 1) + 'px';
      });
    }

    function exportFlowAsImage(callback) {
      setTimeout(() => {
        let body = document.body;
        let html = document.documentElement;
        let width = Math.max( body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth );
        let container = $("#editor-container");
        let config = {
          x: 0,
          y: 0,
          scrollX: 0,
          scrollY: 0,
          width: width,
          height: container.height(),
          allowTaint: true,
          foreignObjectRendering: true,
          imageTimeout: 30000,
          logging: false,
          useCORS: true,
          onclone: prepareDataForImageExport,
          ignoreElements: (elem) => {
            let style = $(elem).attr('class') || '';
            if (
              style.includes('components_printButton') ||
              style.includes('Simulator_simulator') ||
              style.includes('PopTab_tab') ||
              style.includes('LanguageSelector_language')
            ) {
              return true;
            }
            return false;
          }
        };
        html2canvas(container[0], config).then (canvas => {
          Object.assign(document.createElement('a'), {
            download: "{{title}}.jpg",
            href: canvas.toDataURL('jpeg', 1.0),
          })
          .click();
          callback();
        });
      }, 1000)
    }

    function handleActivityClicked(nodeUUID, count) {
      var endpoint = '{% url "msgs.broadcast_send" %}';
      var modal = document.querySelector("#send-message-modal");
      modal.endpoint = endpoint + "?step_node=" + nodeUUID + "&count=" + count;
      modal.open = true;
    }

    function showPendingMessage() {
      var message = $('#pending');
      message.show();
      setTimeout(function () {message.hide();}, 3000);
    }

    const config = {
      
      // TODO: Remove once legacy editor is gone
      // this is only to support manual migration
      forceSaveOnLoad: "{{migrate}}" == "True",

      flow: '{{object.uuid}}',
      flowType: flowType,
      localStorage: true,
      showTemplates: "{{has_whatsapp_channel}}" == "True",
      onLoad: handleEditorLoaded,
      onActivityClicked: handleActivityClicked,
      mutable: {{mutable|lower}},
      filters: {{feature_filters|to_json}},

      help: {
        legacy_extra: 'https://help.nyaruka.com/en/articles/3747485-migrating-away-from-legacy_extra',
        missing_dependency: 'http://help.nyaruka.com/en/articles/3747650-fixing-missing-dependencies',
        invalid_regex: 'http://help.nyaruka.com/en/articles/3747654-invalid-regular-expressions'
      },

      endpoints: {

        groups: api + 'groups.json',
        fields: api + 'fields.json',
        labels: api + 'labels.json',
        channels: api + 'channels.json',
        classifiers: api + 'classifiers.json',
        resthooks: api + 'resthooks.json',
        templates: api + 'templates.json',
        flows: api + 'flows.json?archived=false',
        globals: api + 'globals.json',
        editor: '/flow/editor',

        // TODO: migrate to API?
        revisions: '/flow/revisions/{{object.uuid}}/',
        recents: '/flow/recent_messages/{{object.uuid}}/',
        attachments: '/flow/upload_media_action/{{object.uuid}}/',
        attachments_validation: '{% url "api.v2.attachments_validation" %}',
        languages: base + 'language',
        environment: base + 'environment',
        activity: '/flow/activity/{{object.uuid}}/',
        recipients: '/contact/omnibox?v=2&types=gc',

        completion: '/mr/docs/completion.json',
        functions: '/mr/docs/functions.json',
        simulateStart: '/flow/simulate/{{object.id}}/',
        simulateResume: '/flow/simulate/{{object.id}}/',

        lookups: '/flow/lookups_api/',
        giftcard: '/flow/giftcards_api/',
        link: '/link/api/',
      }
    };

    showFlowEditor(document.getElementById('rp-flow-editor'), config);

    {% if org_perms.flows.flow_update %}
    $(".update-rulesflow").live('click', function(){
      var modal = new Modax('Update Flow', '{% url "flows.flow_update" object.pk %}');
      modal.setIcon('icon-users-2');
      modal.setListeners({
        onSuccess: function(data) {location.reload(); },
        onFormLoaded: function() {
          $('#id_label').children("option:first-child").before("<option></option>");
          $('#id_label').select2({minimumResultsForSearch: -1, placeholder: "No Label Selected"});}
      });
      modal.show();
    });
    {% endif %}

    $('a.pdf_export_next_submit').on('click', function() {
      var txt;
      var r = confirm("{% trans 'Please note that if your flow is very large, this might cause some problems in generating the PDF. Do you want to continue?' %}");
      if (r == true) {
        var currentLang = $('.languages').find('.active');
        $('#pdf_export_lang').val(currentLang.data('lang'));
        $('form.pdf_export_next').submit();
      }
    });

    // Launching the flow
    {% if org_perms.msgs.broadcast_send %}
      $(".launch-rulesflow").live('click', function(){
        var modal = new Modax(gettext('Launch Flow'), '{% url "flows.flow_launch" object.pk %}');
        var onActions = {
          onSuccess: function(data) {
            // trigger an update right after sending so we have 
            // and opportunity to show "starting" status
            window.triggerActivityUpdate();
            showPendingMessage();
          },
          onFormLoaded: function() {}
        }
        // check if there is no channel, change the primary button behavior to redirect to channel creation
        {% if not can_start or not has_outgoing_channel %}
          modal.setPrimaryButton(gettext("Add Channel"));
          onActions['onPrimary'] = function() { document.location.href = '{% url "channels.channel_list" %}' };
        {% endif %}

        modal.setListeners(onActions);
        modal.show();
      });
    {% endif %}

    {% if org_perms.flows.flow_delete %}
      $(".delete-flow").live('click', function() {
        var modal = new Modax('{% trans "Delete Flow" %}', '{% url "flows.flow_delete" flow.id %}');
        modal.addClass("alert");
        modal.setRedirectOnSuccess(true);
        modal.show();
      });
    {% endif %}

    {% if org_perms.flows.flow_editor %}
      $(".previous-editor").live('click', function() {
        var modal = new ConfirmationModal(gettext("Previous Editor"), gettext("When going back to the previous editor, any changes you have made in the new editor will be lost. If you are having difficulty using the new editor, please reach out to support and let us know.<br/><br/>Are you sure you want to go back to using the previous editor?"));
        modal.addClass("alert");
        modal.setPrimaryButton("Use Previous Editor")

        modal.setListeners({ onPrimary: ()=>{
          document.location.href = '{% url "flows.flow_editor" flow.uuid%}?legacy=true'
        }});

        modal.show();
      });
    {% endif %}

    {% if immutable_alert %}
      var modal = new ConfirmationModal(gettext("You can't edit this flow"), "{{ immutable_alert }}");
      modal.setListeners({ onSecondary: ()=>{
        window.history.back();
      }});
      modal.show();
    {% endif %}

-block page-container

  -include "msgs/msg_send_modal.html"
  -include "delete_modal_include.html"

  %form{method:'POST', class:'pdf_export_next hide'}
    -csrf_token
    %input{type:'hidden', id:'pdf_export_lang', name:'pdf_export_lang'}

  %rp-modax#send-message-modal{ header:"Send Message" }

  #toolbar
    .actions.pull-right
      -include "gear_links_include.haml"
    %h2
      -if flow.flow_type == 'V'
        .icon-phone
      -elif flow.flow_type == 'S'
        .icon-mobile
      {{ flow.name }}
    
    #pending{"{%if not is_starting%} hidden {% endif %}"}
      %div{class:"alert alert-info"}
        -blocktrans
          This flow is in the process of being sent, this message will disappear once all contacts have been added to the flow.

  #rp-flow-editor
    <rp-loading units="10" size="8"></rp-loading>
