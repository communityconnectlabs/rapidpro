{% extends "smartmin/base.html" %}

-load compress temba i18n

-block page-title
  {{object.name}}

-block extra-style
  %link{rel:'stylesheet', href:'https://fonts.googleapis.com/css?family=Roboto+Mono:300|Roboto:300,400,500'}

  -for css in styles
    %link{rel:'stylesheet', type:'text/css', href:'{{css}}'}

  :css
    body {
      line-height: inherit;
    }

    h2 .icon-phone {
      width: 40px;
    }

    h2 .icon-mobile {
      width: 40px;
    }

    #rp-flow-editor #simulator {
      top: 20px;
      margin-left: 20px;
    }

    #header *, #top-menu *, .org-header * {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      z-index: 0;
    }

    .ReactModalPortal {
      --curvature: 4px;
      --curvature-widget: 4px;
    }

    /* case_list_case is the dnd portal under body */
    #rp-flow-editor, .case_list_case {
      --curvature: 4px;
      --curvature-widget: 4px; 
    }

    #rp-flow-editor input[type=text] {
      height: inherit !important;
      line-height: inherit;
    }

    #rp-flow-editor p {
      display: block;
      margin-block-start: 1em;
      margin-block-end: 1em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
    }

    .page-wrap:after {
      height: 0px;
    }

    #rp-flow-editor input {
      font-family: 'Roboto', sans-serif;
      font-size: 14px !important;
      font-weight: 300 !important;
    }

    #rp-flow-editor input:focus {
      box-shadow: none;
      outline: none;
      border: none;
    }

    #header {
      margin: 0;
    }

    #menu {
      line-height: 20px;
    }

    #toolbar h2 {
      margin-top: -5px;
    }

    .org-header {
      z-index: 1000 !important;
      line-height: 20px;
    }

    #top-menu {
      z-index: inherit;
    }

    #top-menu.expanded {
      z-index: 3000 !important;
    }

    .gear-menu.open {
      z-index: 3000;
    }

    #toolbar {
      visibility: visible;
      position: relative;
      padding: 18px 30px;
    }

    #toolbar h2 {
      margin-bottom: 0;
    }

    #pending {
      position: relative;
      right: 0;
      width: 40%;
      height: 36px;
      margin: 0 auto;
      text-align: center;
    }

    #grid {
    }

    #rp-flow-editor {
      visibility: visible;
      width: 100%;
    }

    #rp-flow-editor h1 {
      font-weight: 300;
      font-family: 'Roboto'
    }

    #rp-flow-editor #canvas-container > div {
      box-shadow: inset 0 7px 9px -10px rgba(0,0,0,0.4);
    }

    #rp-flow-editor #canvas-container #canvas:after {
      box-shadow: inset 0 7px 9px -10px rgba(0,0,0,0.4);
      
    }

    #rp-flow-editor > div {
      opacity: 0;
      transition: opacity 150ms linear;
    }

    temba-loading {
      margin-left: 20px;
      display: block;
    }

    .page-wrap {
      min-height: inherit;
      padding-bottom: inherit;
      margin-bottom: inherit;
    }

    .footer {
      display: none;
    }

    label, input, button, select, textarea {
      font-size: inherit;
      font-weight: inherit;
      line-height: inherit;
      margin-bottom: 0;
    }

    .inverted {
      color: var(--color-text-light);
      background: #1a1a1a;
      border-radius: 100%;
    }

    [class*="components_printButton"] {
      right: -78px;
    }

    [class*="Canvas_canvas_background"] {
      padding-top: 40px;
    }

    #rp-flow-editor .language-selector {
      top: 5px;
    }

    [class*="Flow_empty_flow"] {
      margin: -10px 30px 0 24px !important;
    }

-block extra-script
  {{ block.super }}

  %script{type:'text/javascript', src:'{{ STATIC_URL }}js/html2canvas.min.js'}
  -for script in scripts
    %script{type:'text/javascript', src:'{{script}}'}

  :javascript
    const base = '/flow/assets/{{object.org.id}}/' + new Date().getTime() + '/';
    const api = '/api/v2/';

    // line up our flow types with goflow types
    var flowType = '{{object.flow_type}}';
    if (flowType == 'M') {
      flowType = 'messaging';
    } else if (flowType == 'V') {
      flowType = 'voice';
    } else if (flowType == 'S') {
      flowType = 'messaging_offline';
    }

    window.addEventListener("DOMContentLoaded", function() {
      var confirmation = document.getElementById("confirm-language");
      confirmation.addEventListener("temba-button-clicked", function(event){
        var code = confirmation.dataset.code;
        if(!event.detail.button.secondary) {
          posterize('{% url "flows.flow_change_language" object.id %}?language=' + code);
        }
        confirmation.open = false;
      });

      var combineFlowsTrigger = document.querySelector(".merge-flows-trigger");
      var combineFlowsModal = document.getElementById("combine-flows");
      combineFlowsTrigger.onclick = (event) => {
        combineFlowsModal.classList.remove("hide");
        combineFlowsModal.open = true;
      };
      combineFlowsModal.addEventListener("temba-button-clicked", function(event) {
        if (!event.detail.button.secondary) {
          let form = document.getElementById("select-source-form");
          form.submit();
        }
        combineFlowsModal.open = false;
      });
    });

    function handleEditorLoaded() {
      $('temba-loading').hide();
      $('#rp-flow-editor > div').css('opacity', '1');
      $('[class*="components_printButton"]').click((e) => {
        e.stopPropagation(); // Prevent print to PDF call on this page.
        if ($.browser.mozilla) {
          // For Mozilla Firefox we use a different way of exporting because it correctly exports to PDF only the first page.
          if(!document.querySelector("#image-export-confirmation")) {
            let imageExportConfirmation = document.createElement("temba-dialog");
            imageExportConfirmation.id = "image-export-confirmation";
            imageExportConfirmation.header = gettext("Flow Export");
            let dialogBody = document.createElement("div")
            dialogBody.className = "body";
            dialogBody.innerHTML = `<p style="margin: 20px;">${gettext("The current flow will be exported as an image.")}</p>`;
            imageExportConfirmation.body = dialogBody;
            imageExportConfirmation.addEventListener("temba-button-clicked", function(event) {
              if (!event.detail.button.secondary) {
                imageExportConfirmation.loading = true;
                exportFlowAsImage(() => {
                  imageExportConfirmation.open = false;
                  imageExportConfirmation.loading = false;
                });
              }
            });
            document.body.append(imageExportConfirmation);
            imageExportConfirmation.open = true;
          } else {
            let imageExportConfirmation = document.querySelector("#image-export-confirmation");
            imageExportConfirmation.open = true;
          }
        } else {
          // In all other case we use normal exporting.
          Object.assign(document.createElement('a'), {
            target: '_blank',
            href: '{% url "flows.flow_export_pdf" object.uuid %}'
          }).click();
        }
      });
    }

    function prepareDataForImageExport(documentCopy) {

      function replaceContent(element, content) {
        let newElement = documentCopy.createElement('span');
        newElement.innerHTML = content;
        element.parentNode.replaceChild(newElement, element);
      }

      documentCopy.querySelectorAll('[class*="fe-"]').forEach((el) => {
        if (el.className.includes('fe-paperclip')) {
          replaceContent(el, "📎");
        } else if (el.className.includes('fe-group')) {
          replaceContent(el, "👥");
        } else if (el.className.includes('fe-label')) {
          replaceContent(el, "🏷️");
        } else {
          replaceContent(el, "");
        }
      });
      documentCopy.querySelectorAll('[class*="Pill_pill"], [class*="Exit_name"]').forEach((el) => {
        el.style.fontSize = (parseFloat(window.getComputedStyle(el).fontSize) - 1) + 'px';
      });
    }

    function exportFlowAsImage(callback) {
      setTimeout(() => {
        let body = document.body;
        let html = document.documentElement;
        let width = Math.max( body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth );
        let container = $("#editor-container");
        let config = {
          x: 0,
          y: 0,
          scrollX: 0,
          scrollY: 0,
          width: width,
          height: container.height(),
          allowTaint: true,
          foreignObjectRendering: true,
          imageTimeout: 30000,
          logging: false,
          useCORS: true,
          onclone: prepareDataForImageExport,
          ignoreElements: (elem) => {
            let style = $(elem).attr('class') || '';
            if (
              style.includes('components_printButton') ||
              style.includes('Simulator_simulator') ||
              style.includes('PopTab_tab') ||
              style.includes('LanguageSelector_language')
            ) {
              return true;
            }
            return false;
          }
        };
        html2canvas(container[0], config).then (canvas => {
          Object.assign(document.createElement('a'), {
            download: "{{ object.name }}.jpg",
            href: canvas.toDataURL('jpeg', 1.0),
          })
          .click();
          callback();
        });
      }, 1000)
    }

    function handleActivityClicked(nodeUUID, count) {
      var endpoint = '{% url "msgs.broadcast_send" %}';
      var modal = document.querySelector("#send-message-modal");
      modal.endpoint = endpoint + "?step_node=" + nodeUUID + "&count=" + count;
      modal.open = true;
    }

    function handleChangeLanguage(code, name) {

      var confirmation = document.getElementById("confirm-language");
      confirmation.classList.remove("hide");
      confirmation.dataset.code = code;
      
      var body = confirmation.querySelector('.body');
      body.innerHTML = body.innerHTML.replace(/%LANG%/g, name);
      confirmation.open = true;      
    }

    const config = {
      
      // TODO: Remove once legacy editor is gone
      // this is only to support manual migration
      forceSaveOnLoad: "{{migrate}}" == "True",

      flow: '{{object.uuid}}',
      flowType: flowType,
      localStorage: true,
      onLoad: handleEditorLoaded,
      onActivityClicked: handleActivityClicked,
      onChangeLanguage: handleChangeLanguage,
      mutable: {{mutable|lower}},
      filters: {{feature_filters|to_json}},

      help: {},

      endpoints: {

        groups: api + 'groups.json',
        fields: api + 'fields.json',
        labels: api + 'labels.json',
        channels: api + 'channels.json',
        classifiers: api + 'classifiers.json',
        ticketers: api + 'ticketers.json',
        resthooks: api + 'resthooks.json',
        templates: api + 'templates.json',
        flows: api + 'flows.json?archived=false',
        globals: api + 'globals.json',
        editor: '/flow/editor',

        // TODO: migrate to API?
        revisions: '/flow/revisions/{{object.uuid}}/',
        recents: '/flow/recent_messages/{{object.uuid}}/',
        attachments: '/flow/upload_media_action/{{object.uuid}}/',
        attachments_validation: '{% url "api.v2.attachments_validation" %}',
        languages: base + 'language',
        environment: base + 'environment',
        activity: '/flow/activity/{{object.uuid}}/',
        recipients: '/contact/omnibox?v=2&types=gc',

        completion: '/mr/docs/completion.json',
        functions: '/mr/docs/functions.json',

        {% if can_simulate %}
        simulateStart: '/flow/simulate/{{object.id}}/',
        simulateResume: '/flow/simulate/{{object.id}}/',
        {% endif %}

        lookups: '/flow/lookups_api/',
        giftcard: '/flow/giftcards_api/',
        link: '/link/api/',
      }
    };

    showFlowEditor(document.getElementById('rp-flow-editor'), config);

    {% if immutable_alert %}
      let immutableAlertModal = document.querySelector("#immutable_alert");
      immutableAlertModal.header = gettext("You can't edit this flow");
      immutableAlertModal.primaryButtonName = gettext("OK");
      immutableAlertModal.addEventListener("temba-button-clicked", function(event) {
        if (event.detail.button.secondary) {
          window.history.back();
        }
        immutableAlertModal.open = false;
      });
      immutableAlertModal.open = true;
    {% endif %}

-block page-container

  %temba-modax#send-message-modal{ header:"Send Message" }

  .top-bar.pb-2
    .flex.flex-col.pt-4
      .flex.px-6.pb-2
        .title.flex-grow
          .flex.page-title
            -if flow.flow_type == 'V'
              .icon-phone.mt-2.mr-6
            -elif flow.flow_type == 'S'
              .icon-mobile.mt-2.mr-6
            .ml-0
              {{title}}
        .menu
          -include "gear_links_include.haml"

      -if is_starting
        .p-3.bg-gray-100.w-full.text-center
          -blocktrans trimmed
            This flow is in the process of being sent, this message will disappear once all contacts have been added to the flow.

  %temba-dialog.hide#confirm-language(header='{{_("Change Language")|escapejs}}' primaryButtonName='{{_("Update")|escapejs}}')
    .p-6.body
      -blocktrans trimmed with language="%LANG%"
        This will change the default language of the flow to <b>{{ language }}</b>. This means that by default the
        flow will be appear in that language and can be translated into other languages. Also if a contact is
        in this flow and no translation exists for their language or the default language of the workspace,
        communication with that contact will default to <b>{{ language }}</b>.

  %temba-dialog.hide#combine-flows(header='{{_("Combine Flows")|escapejs}}' primaryButtonName='{{_("OK")|escapejs}}')
    .p-6.body
      %form#select-source-form{action: "{% url 'flows.flow_merge_flows' %}"}
        %label
          - trans "Original Flow"
          .icon-help.inverted(data-toggle="tooltip" data-placement="bottom" title="{% trans 'This is the flow that will transfer data to the destination flow' %}")
        %temba-select(name="source")
          - for flow in mergeable_flows
            %temba-option(name="{{ flow }}" value="{{ flow.uuid }}")

        %label
          - trans "Destination Flow"
          .icon-help.inverted(data-toggle="tooltip" data-placement="bottom" title="{% trans 'This is the flow that will have the combined data from the original flow' %}")
        %temba-select(name="target")
          %temba-option(name="{{ object.name }}" value="{{ object.uuid }}" selected)

  - if immutable_alert
    %temba-dialog#immutable_alert
      .p-6.body
        = immutable_alert


  #grid.h-full
    <temba-loading units="10" size="8"></temba-loading>
    #rp-flow-editor

