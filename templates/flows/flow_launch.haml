-extends 'includes/modax.html'
-load smartmin
-load i18n

-block fields
  -if object.flow_type == 'M' and not send_channel
    %p
    -blocktrans with name=brand.name
      To get started you need to add a channel to your workspace. A channel is a phone number or social network
      account which {{ name }} can use to send and receive messages on your behalf. You can choose to use an
      Android phone and your own cell phone plan, or we can connect you with a service provider in your country
      directly.
    %hr
    %p
      -trans "You can always test your flow using the simulator, click"
        %span.glyph.icon-mobile{style:"padding-top:2px;"}
      -trans "on the right to open it."

  -elif object.flow_type == 'V' and not call_channel
    %p
      -blocktrans trimmed with name=brand.name
        To get started you need to add a voice-enabled channel to your workspace. A voice-enabled channel is a
        phone number which {{ name }} can use to make and receive phone calls on your behalf. For example, Twilio
        is a service which provides voice-enabled numbers which you can add as channels in your {{ name }} workspace.

  -else
    -if warnings
      -for warning in warnings
        .mb-4
          %temba-alert{level: "warning"}
            %div= warning

    .field
      - render_field 'launch_type'

    .l-immediately
      .field.start-type
        - render_field 'start_type'

      .field.omnibox{class:'{% if not form.start_type.value == "select" %}hidden{%endif%}'}
        - render_field 'omnibox'

      .field.contact-query{class:'{% if form.start_type.value == "select" %}hidden{%endif%}'}
        - render_field 'contact_query'

      .start-options.mt-6.ml-2
        - render_field 'restart_participants'
        - render_field 'include_active'

        -if flow_params_fields
          .control-group
            %h5
              -trans "Flow Parameters"

            #embedded-data
              .embed-container
                -for flow_param_field in flow_params_fields
                  .embed-row.embed-template
                    .embed-field
                      - render_field flow_param_field.0
                    .embed-value
                      - render_field flow_param_field.1

    .loader.hidden
      %img{src:"{{STATIC_URL}}images/loader-circles.gif"}

    -if warnings
      %div.warning
        -for warning in warnings
          %p= warning

        %p
          -trans "You may still start this flow but WhatsApp contacts who have not sent an incoming message in the last 24 hours may not receive it."

-block form-buttons
  -if send_channel
    .form-actions
      %input.btn.btn-primary{type:"submit", value:"{{ submit_button_name }}"}

-block summary
  %p
    -if not run_count
      -trans "This flow has never been started."
    -elif run_count == 1
      %span.attn1
        -trans "This flow has been started once."
    -else
      %span.attn
        -trans "This flow has been started {{ run_count }} times."

    -if complete_count == 1
      -trans "It has been completed"
      %span.attn
        -trans "Once."
    -elif complete_count > 1
      -trans "It has been completed"
        %span.attn
          -trans "{{ complete_count }} times."

-block extra-script
  {{ block.super }}

-block modal-extra-style
  {{ block.super }}
  :css
    .loader {
      display: flex;
      justify-content: center;
    }

    .embedded-data-update {
      margin: 0 0 5px 4px;
      font-weight: 400;
      font-size: 13px;
      letter-spacing: 0.05em;
      line-height: normal;
      color: rgb(119, 119, 119);
    }

    .embed-row {
      display: flex;
    }

    .embed-field, .embed-value {
      width: 49%;
      margin: 0 5px 5px 0;
    }

    .embed-field > input, .embed-value > input {
      width: calc(100% - 18px);
      font-size: 13px;
      padding: 7px;
      border-radius: var(--curvature-widget);;
      border: 1px solid var(--color-widget-border);
      color: var(--color-widget-text);
      outline: none;
    }

    .embed-field > input:read-only {
      background: #eee;
    }

    .embed-value > input:focus {
      background: var(--color-widget-bg-focused);
      border-color: var(--color-focus);
      box-shadow: var(--widget-box-shadow-focused);
    }

    .hidden {
      display: none;
    }

-block modal-script
  {{block.super}}
  :javascript
    function addClass(ele, className) {
      ele.classList.add(className);
    }

    function removeClass(ele, className) {
      ele.classList.remove(className);
    }

    var modalBody = document.querySelector("#launch-flow").shadowRoot

    var queryField = modalBody.querySelector('.contact-query');
    var recipientsField = modalBody.querySelector('.omnibox');
    var modeSelect = modalBody.querySelector("temba-select[name='start_type']");

    if (modeSelect) {
      modeSelect.addEventListener("change", function(evt) {
        var selected = evt.target.values[0];
        if (selected.value === "query") {
          removeClass(queryField, "hidden");
          addClass(recipientsField, "hidden");
        } else {
          addClass(queryField, "hidden");
          removeClass(recipientsField, "hidden");
        }
      });
    }

    var typeSwitcher = modalBody.querySelector("#id_launch_type");
    var launchImmediatelyBox = modalBody.querySelector(".l-immediately");
    var loader = modalBody.querySelector(".loader");
    function showLaunchFlowBox(selected) {
      addClass(launchImmediatelyBox, "hidden");
      addClass(loader, "hidden");
      switch(selected) {
        case "LAUNCH_IMMEDIATELY":
          removeClass(launchImmediatelyBox, "hidden");
          // showFieldsOnStartType(startFlowTypeSelector.val());
          break;
        case "LAUNCH_ON_KEYWORD_TRIGGER":
          window.location.href = "{% url 'triggers.trigger_create' %}?trigger=keyword&flow={{flow.id}}"
          removeClass(loader, "hidden");
          break;
        case "LAUNCH_ON_SHEDULE_TRIGGER":
          window.location.href = "{% url 'triggers.trigger_create' %}?trigger=schedule&flow={{flow.id}}"
          removeClass(loader, "hidden");
          break;
        }
      }

      typeSwitcher.addEventListener("change", function (event) {
        let type = event.target.values[0].value;
        showLaunchFlowBox(type);
      });

-load humanize    
