-extends "smartmin/form.html"

-load smartmin
-load i18n humanize


-block fields
  .template-name
    -render_field 'name'
  .template-orgs
    -render_field 'orgs'
  .template-global_view
    -render_field 'global_view'
  .template-group
    -render_field 'group_text'
    %temba-modax#add-group-modal{ header:'{% trans "Add Group" %}', endpoint:"{% url 'flows.flowtemplate_create_group' %}"}
      %a.block.add-group-modal.mb-5.text-right(onclick="onClickAddGroup()")
        -trans "Add Group"
  .template-tags
    -render_field 'tags_text'

  .template-description
    -render_field 'description'

  -if not ignore_upload
    #file-upload
      %input(type="file" name="file" id="import-file" onchange='onFileChange()')
      #real-button.flex.mb-4
        %input(type="text" id="file-field")
        .button-light.ml-4(style="margin-top:-1px")
          -trans "Choose File"
      -if form.file.errors
        %div.alert-error
          {{ form.file.errors }}

-block form-buttons
  .form-actions.mt-10
    %input(type="button" class="button-light mr-5" value="Cancel" onclick="backToList()")
    %input(type="submit" class="button-primary" value="{{ submit_button_name }}")


-block modal-script
  {{block.super}}
  %script{src: "{{ STATIC_URL }}/js/flow-common.js", type: "text/javascript"}
  :javascript
    var addGroupMode = false;
    function backToList() {
      window.location.href = '{% url "flows.flowtemplate_list" %}'
    }

    function onFileChange() {
      const { modaxBody } = getModalResources('create-template-modal');
      const fileNode = modaxBody.querySelector('#import-file');
      const fileFieldNode = modaxBody.querySelector('#file-field');
      let file = $(fileNode).val();
      while (file.indexOf('\\') >= 0) {
        file = file.substring(file.indexOf('\\') + 1, file.length);
      }
      $(fileFieldNode).val(file);
    }

    function getUniqueName(node) {
      return `${node.getAttribute('name')}-${node.getAttribute('value')}`;
    }

    function buildOptionList (nodes) {
      const list = [];
      nodes.forEach((node) => list.push(getUniqueName(node)));
      return list;
    }

    function onClickAddGroup() {
      addGroupMode = true;
    }


-block modal-extra-style
  {{block.super}}
  %link{rel:"stylesheet", href:"{{ STATIC_URL }}css/tailwind.css", type:"text/css"}
  :css
    input {
      padding: 9px;
      cursor: pointer;
      box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.04) 0px 3px 20px 0px, rgba(0, 0, 0, 0.02) 0px 1px 2px 0px;
    }

    #file-upload {
      position: relative;
    }

    #real-button {
      position: relative;
      top: 0;
      left: 0;
      z-index: 1;
    }

    #file-field {
      width: 300px;
      height: 35px;
      font-size: 16px;
      margin-bottom: 0px;
      border-radius: 5px;
    }

    #import-file {
      position: absolute;
      width: 450px;
      height: 35px;
      top: 0;
      left: 0;
      text-align: right;
      -moz-opacity:0 ;
      filter: alpha(opacity: 0);
      opacity: 0;
      z-index: 2;
    }
    form.smartmin-form ul.errorlist {
       font-size: 14px;
    }
    form.smartmin-form ul.errorlist li {
       color: rgb(255 99 71);
    }
