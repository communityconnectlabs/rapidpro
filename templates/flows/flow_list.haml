-extends "smartmin/list.html"
-load smartmin sms temba compress i18n humanize

-block page-title
  -trans "Flows"

-block page-top

-block content

  -if org_perms.flows.flow_update
    %temba-modax#export-results{ header:'{% trans "Download Results" %}' }
    %temba-modax#create-label-modal{ header:'{% trans "Create Label" %}', endpoint:"{% url 'flows.flowlabel_create' %}", "-temba-loaded": "handleCreateLabelModalLoaded", "-temba-submitted": "handleCreateLabelModalSubmitted"}

  #pjax
    -block pjax
      .lp-frame
        .left
          .flex.flex-col
            -if org_perms.flows.flow_create
              .w-64.mr-5
                %temba-modax#create-flow-modal{ width: "712px", header:'{% trans "Create Flow" %}', endpoint:"{% url 'flows.flow_show_templates' %}", onclick: "configureModal()"}
                  .button-primary.block
                    -trans "Create Flow"

          .lp-nav.upper
            -for folder in folders
              .lp-nav-item{'class': '{% if folder.url == request_url %}font-normal{% endif %}' }
                .name{onclick:"goto(event)", href:'{{folder.url}}'}
                  {{folder.label}}
                .count{onclick:"goto(event)", href:'{{folder.url}}'}
                  {{ folder.count | intcomma }}

          -if campaigns
            .lp-nav.lower
              .font-normal.uppercase.text-xs.text-gray-500.pb-1
                -trans "Campaigns"
              -for campaign in campaigns
                .lp-nav-item{'class': '{%if current_campaign.id == campaign.campaign__id %}font-normal{% endif %}' }
                  .name{onclick:"goto(event)", href:'{% url "flows.flow_campaign" campaign.campaign__id %}'}
                    {{campaign.campaign__name}}
                  .count{onclick:"goto(event)", href:'{% url "flows.flow_campaign" campaign.campaign__id %}'}
                    {{ campaign.count | intcomma }}

          -if labels
            .lp-nav.lower

              .inner-scroll
                .font-normal.uppercase.text-xs.text-gray-500.pb-1
                  - trans "Labels"

                -for label in labels
                  -if label.children
                    .lp-nav-item{ class:'{% if current_label.pk == label.pk %}font-normal{% endif %}' }
                      .name{onclick:"goto(event)", 'href':'{% url "flows.flow_filter" label.pk %}'}
                        {{ label.label }}
                      .count.-mr-1.text-gray-400
                        -if current_label.pk == label.pk or current_label.parent_id == label.pk
                          .glyph.icon-arrow-down-2{onclick:"goto(event)", 'href':'{% url "flows.flow_filter" label.pk %}'}
                        -else
                          .glyph.icon-arrow-right-8{onclick:"goto(event)", 'href':'{% url "flows.flow_filter" label.pk %}'}

                    -if current_label.pk == label.pk or current_label.parent_id == label.pk
                      .pl-2.mt-1.level2.font-light
                        -for child in label.children
                          .lp-nav-item{ class:'{% if current_label.pk == child.pk %}font-normal{% endif %}' }
                            .name{onclick:"goto(event)",  href:"{% url 'flows.flow_filter' child.pk %}" }
                              {{ child.name }}
                            .count{onclick:"goto(event)", href:"{% url 'flows.flow_filter' child.pk %}" }
                              {{ child.get_flows_count | intcomma }}

                -for label in labels
                  -if not label.children
                    .lp-nav-item{ class:'{% if current_label.pk == label.pk %}font-normal{% endif %}' }
                      .name{onclick:"goto(event)", href:"{% url 'flows.flow_filter' label.pk %}", class:'{% if current_label.pk == label.pk %}font-normal active{% endif %}' }
                        {{ label.label }}
                      .count{onclick:"goto(event)", href:"{% url 'flows.flow_filter' label.pk %}", class:'{% if current_label.pk == label.pk %}font-normal active{% endif %}' }
                        {{ label.count | intcomma }}

          .flex-grow
            -if org_perms.flows.flowstart_list
              .button-light.block.mt-3(onclick="goto(event)" href="{% url 'flows.flowstart_list' %}")
                -trans "Flow Start Log"

            -if org_perms.request_logs.httplog_webhooks
              .mt-3.button-light.block.mt-3(onclick="goto(event)" href="{% url 'request_logs.httplog_webhooks' %}")
                -trans "Webhook Call Log"

        .right
          -if org_has_flows
            .flex.w-full.items-end.mb-4
              -block action-buttons
                .action-buttons.list-buttons-container.h-full.mr-2.flex-grow
                  .list-buttons.flex.items-center.-mx-2.h-full
                    - if 'unlabel' in actions and org_perms.flows.flow_update
                      - if 'unlabel' in actions
                        .button-action.object-btn-unlabel
                          .glyph.icon-box
                          -trans "Remove Label"

                    - if 'restore' in actions and org_perms.flows.flow_update
                      .button-action.object-btn-restore
                        .-mt-1.mr-2.glyph.icon-checkmark
                        -trans "Activate"

                    - if 'archive' in actions and org_perms.flows.flow_update
                      .button-action.object-btn-archive
                        .-mt-1.mr-2.glyph.icon-box
                        -trans "Archive"

                    - if 'label' in actions and org_perms.flows.flow_update
                      %span.btn-group
                        .button-action.dropdown-toggle{data-toggle:"dropdown"}
                          .-mt-1.mr-2.glyph.icon-tag
                          -trans "Label"

                        %ul.dropdown-menu.label-menu.rounded-lg.border-none.px-4.py-3
                          -for label in labels
                            -with label.children as children
                              -if children
                                %li.dropdown-submenu
                                  .lbl-menu.object-btn-label{data-id:'{{label.pk}}'}
                                    .flex.items-center.py-1.linked
                                      .glyph.message-label
                                      .name
                                        = label.label
                                      .flex-grow.text-right
                                        .icon-arrow-right-8.text-2xl.-mt-1

                                  %ul.dropdown-menu.label-menu.rounded-lg.border-none.px-4.py-3
                                    -for child in children
                                      %li
                                        .lbl-menu.object-btn-label{data-id:'{{child.pk}}'}
                                          .flex.items-center.py-1.linked
                                            .glyph.message-label
                                            = child.name

                          -for label in labels
                            -if not label.children
                              %li
                                .lbl-menu.object-btn-label{data-id:'{{label.pk}}'}
                                  .flex.items-center.py-1.linked
                                    .glyph.message-label
                                    = label.label

                          -if org_perms.flows.flowlabel_create
                            -if labels
                              %li.separator.-mx-4.border-b.my-3
                            %li
                              .lbl-menu.add-label.linked{onclick:"handleAddLabelClicked()"}
                                -trans "New Label"

                    .button-action.object-btn-export{onclick:'exportFlows()'}
                      .-mt-1.mr-2.glyph.icon-excel
                      -trans "Download Results"

              .flex-grow.ml-2.items-center
                -block title-text
                  .page-title.leading-tight
                    {{title}}
              .gear-links
                -include "gear_links_include.haml"

            -if view.search_fields
              %form#search-form.mb-4(method="get")
                %temba-textinput(type='text' placeholder='{% trans "Search" %}' name="search" value="{{search}}")
                -if request.REQUEST.status
                  %input(type='hidden' name='status' value='{{request.REQUEST.status}}')

            -block flow-list
              %table.list.lined.selectable
                -if object_list
                  %thead
                    %tr
                      -if org_perms.flows.flow_update
                        %th
                      %th
                      %th
                      %th.whitespace-nowrap
                        Runs / Completion

                %tbody
                  -for object in object_list
                    %tr.object-row.select-row{ data-object-uuid: "{{object.uuid}}", data-object-id: "{{ object.id }}",  onrowclick:'gotoLink("{% url "flows.flow_editor" object.uuid%}")'}

                      -if org_perms.flows.flow_update
                        %td.checkbox.object-row-checkbox
                          %temba-checkbox{onclick:"handleRowSelection(this)"}

                      %td.w-full
                        .flex.flex-wrap.flex-end
                          .flex.inline.whitespace-nowrap
                            -if object.flow_type == 'V'
                              .icon-phone.mr-2.leading-snug
                            -elif object.flow_type == 'S'
                              .icon-mobile.mr-2.leading-snug
                            .name.whitespace-normal
                              {{ object.name }}

                      %td
                        .whitespace-no-break.flex.items-center.ml-2.justify-end
                          -for label in object.labels.all
                            .lbl.linked.ml-2{ onclick:"goto(event)", data-id: '{{label.pk}}', href:"{% url 'flows.flow_filter' label.pk%}"}
                              {{label.name}}

                      %td
                        -if not object.is_archived
                          .whitespace-no-break.flex.items-center.justify-end
                            -if object.has_issues
                              .icon-warning.mr-2(title='{{ _("Has issues")|escapejs }}')

                            -if object.run_stats.total
                              .linked.mr-2.whitespace-nowrap(onclick="goto(event)" href='{% url "flows.flow_results" object.uuid %}')
                                {{ object.run_stats.total|intcomma }}

                              \/
                              .text-center.linked.mx-2.whitespace-nowrap(onclick="goto(event)" href='{% url "flows.flow_results" object.uuid %}')
                                {{ object.run_stats.completion }}%

                  -empty
                    %tr.empty_list
                      %td(colspan='99')
                        -trans "No matching flows."

            -block paginator
              -include "includes/pagination.haml"

          -else
            -include "flows/empty_include.html"

-block extra-script
  {{ block.super }}

  <script id="ccl-script" src="{{ STATIC_URL }}js/ccl-utils.js"></script>
  :javascript
    const debouncedFilterRequest = debounce(filterRequest);
    let modalOpened = false;

    function configureModal() {
      const { modalView, dialogFooter, dialogBody } = getModalResources();
      if (modalView.endpoint === '{% url "flows.flow_show_templates" %}' && !modalOpened) {
        dialogBody.style.maxHeight = 'none';
        dialogBody.style.overflowY = 'visible';
        const button = dialogFooter.querySelector('temba-button');
        button.shadowRoot.querySelector('.button-name').innerHTML = 'Cancel';
        modalOpened = true
      }

      if (!modalView.open) {
        modalView.removeEventListener("click", configureModal);
        modalOpened = false;
      }
    }

    function submitData() {
      const POST_URL = '{% url "flows.flow_create" %}';
      const { modaxBody } = getModalResources();
      const form = modaxBody.querySelector('form');
      const formData = new FormData(form);
      const oReq = new XMLHttpRequest();

      const formElement = form.querySelector('temba-textinput');
      removeErrorAlert(formElement);
      oReq.open('POST', POST_URL, true);
      oReq.send(formData);
      oReq.onload = (oEvent) => {
        const responseURL = oEvent.currentTarget.responseURL;
        if (responseURL.indexOf(POST_URL) > -1) {
          const responseForm = $($.parseHTML(oReq.responseText));
          const textInput = responseForm.find('temba-textinput')[0];
          if (textInput && textInput.errors.length > 0) addErrorAlert(formElement, textInput.errors[0]);
        } else window.location.href = responseURL;
      };
    }

    function handleCreateFlowForm() {
      const { dialogFooter } = getModalResources();
      setTimeout(() => {
        const createBtn = createButton({ name: 'Create', primary: true, onclick: submitData });
        const buttons = dialogFooter.querySelectorAll('temba-button');
        dialogFooter.removeChild(buttons[0]);
        dialogFooter.prepend(createBtn);
      }, 500);
    }

    function createBlank() {
      const { modalView, dialogWrapper, dialogFooter, dialogBody, modaxBody } = getModalResources();
      modalView.open = false;
      dialogBody.style.maxHeight = '55vh';
      dialogBody.style.overflowY = 'auto';

      modalView.endpoint = "{% url "flows.flow_create" %}";

      const options = getHTTPOptions();
      fetch(modalView.endpoint, options)
        .then((response) => response.text())
        .then(function (body) {
          modalView.width = '600px';
          modalView.cancelName = 'Cancel';
          modaxBody.innerHTML = body;
          addBackButton(dialogFooter);
          modalView.open = true;
        });
    }

    function resetModal() {
      const { modalView, dialogWrapper, dialogFooter, dialogBody, modaxBody } = getModalResources();
      modalView.open = false;
      modalView.endpoint = '{% url "flows.flow_show_templates" %}';

      dialogBody.style.maxHeight = 'none';
      dialogBody.style.overflowY = 'visible';

      const buttons = dialogFooter.querySelectorAll('temba-button');
      const names = ['Ok', 'Cancel'];
      for (let i = 0; i < buttons.length; i += 1) {
        const node = buttons[i];
        if (!names.includes(node.name)) dialogFooter.removeChild(node);
      }

      fetch(modalView.endpoint, getHTTPOptions())
        .then((response) => response.text())
        .then((body) => {
          modalView.width = '712px';
          modalView.cancelName = 'Cancel';
          modaxBody.innerHTML = body;
          modalView.open = true;
        });
    }

    function addBackButton(dialogFooter) {
      const buttonElement = createButton({ name: 'Back', primary: true, onclick: resetModal });
      dialogFooter.appendChild(buttonElement);
    }

    function debounce(func, timeout = 800) {
      let timer;
      return (...args) => {
        clearTimeout(timer);
        setTimeout(() => {
          func.apply(this, args);
        }, timeout);
      };
    }

    function filterRequest(e) {
      const { modaxBody } = getModalResources();
      const rightBody = modaxBody.querySelector('.right');
      const searchBarValue = modaxBody.querySelector('input[type=hidden]').getAttribute('value');
      const urlParam = typeof(e) === 'string' ? `group=${e}` : `q=${searchBarValue}`;
      fetch(`{% url "flows.flow_show_templates" %}?${urlParam}`, getHTTPOptions())
        .then((response) => {
          response.text().then((body) => {
            const domDoc = $($.parseHTML(body));
            $(rightBody).html(domDoc.find('.right').html());
          });
        });
    }

    {% if org_perms.flows.flow_update %}
      function handleAddLabelClicked() {
        document.getElementById("create-label-modal").open = true;
      }

      function handleCreateLabelModalLoaded(event) {
        lastChecked = getCheckedIds();
        var body = event.detail.body;
        body.querySelector("#id_flows").value = lastChecked.join();
      }

      function handleCreateLabelModalSubmitted(event) {
        refresh(function() { recheckIds(); }, true);
      }

      function exportFlows(){
        var endpoint = '{% url "flows.flow_export_results" %}';
        var modal = document.querySelector("#export-results");
        var ids = getCheckedIds();
        if (ids.length > 0) {
          modal.setAttribute("endpoint", endpoint + '?ids=' + ids);
        }
        modal.open = true;
      }
    {% endif %}
