-extends "smartmin/form.html"

-load smartmin temba i18n

-block extra-script
  {{ block.super }}
  :javascript


-block modal-script
  {{ block.super }}
  %script{src:"{{ STATIC_URL }}js/flow-parameters.js"}

  :javascript

    var modax = document.querySelector("#event-add, #event-update");
    var body = modax.shadowRoot.querySelector(".modax-body");
    var languageLinks = body.querySelectorAll(".show_language");
    var deliveryHourOptions = body.querySelector("#send-at");
    var unitSelect = body.querySelector("temba-select[name='unit']");
    var eventTypeSelect = body.querySelector("temba-select[name='event_type']");
    var flowSection = body.querySelector("#flow-section");
    var messageSection = body.querySelector("#message-section");

    var display = 'block';
    for (var link of languageLinks) {
      link.addEventListener('click', function(event) {
        for (var section of body.querySelectorAll(".language")) {
          section.style.display = 'none';
        }
        body.querySelector("." + event.target.dataset.iso).style.display = 'block';
      });

      // initial value
      body.querySelector("." + link.dataset.iso).style.display = display;
      display = 'none';

    }

    eventTypeSelect.addEventListener('change', function(event){
      var type = event.target.values[0].value;
      if (type == 'F') {
        flowSection.style.display = 'block';
        messageSection.style.display = 'none';
      } else {
        flowSection.style.display = 'none';
        messageSection.style.display = 'block';
      }
    });

    // whenever our units update, update the hour visibility
    unitSelect.addEventListener('change', function(event) {

      var selectedUnit = event.target.values[0].value;
      if (selectedUnit == "W" || selectedUnit == "D") {
        deliveryHourOptions.style.display = 'flex';
      } else {
        deliveryHourOptions.style.display = 'none';
      }
    });

    // set our initial values according to the form
    {% if form.event_type.value == 'F' %}
      flowSection.style.display = 'block';
      messageSection.style.display = 'none';
    {% else %}
      flowSection.style.display = 'none';
      messageSection.style.display = 'block';
    {% endif %}

    {% if form.unit.value == 'M' or form.unit.value == 'D' %}
      deliveryHourOptions.style.display = 'flex';
    {% else %}
      deliveryHourOptions.style.display = 'none';
    {% endif %}

    body.querySelector("#id_flow_to_start").addEventListener("change", function (event) {
      var selectedFlow = event.target.values[0].value;
      var flowId = (selectedFlow !== '' ? parseInt(selectedFlow) : null);
      if (flowId) {
        var api_url = "{% url 'flows.flow_flow_parameters' %}?flow_id=" + flowId;
        $.getJSON(api_url).done(function(data) {
          buildTriggerFlowParams(data.results, [], 'update', body);
        });
      } else {
        buildTriggerFlowParams([], [], 'update', body);
      }
    });

    var flowField = body.querySelector("#id_flow_to_start");
    setTimeout(() => {
      var idFlowVal = flowField.values[0].value;
      {% if flow_parameters_fields and flow_parameters_values %}
          var flowParamsFields = "{{ flow_parameters_fields }}".split("|");
          var flowParamsValues = "{{ flow_parameters_values }}".split("|");
          _requestAndBuildFlowParams(idFlowVal, flowParamsFields, flowParamsValues);
      {% else %}
        _requestAndBuildFlowParams(idFlowVal);
      {% endif %}
    }, 100)

    {% if flow_parameters_fields and flow_parameters_values %}
      var container = body.querySelector("#embed-container-update");
      var flowParamsFields = "{{ flow_parameters_fields }}".split("|");
      var flowParamsValues = "{{ flow_parameters_values }}".split("|");
      buildTriggerFlowParams(flowParamsFields, flowParamsValues, 'update', body);
    {% endif %}

    function _requestAndBuildFlowParams(flowId, fields, values) {
      if (flowId) {
        var api_url = "{% url 'flows.flow_flow_parameters' %}?flow_id=" + flowId;
        $.getJSON(api_url).done(function(data) {
          if (fields && values) {
            buildTriggerFlowParams(data.results, values, 'update', body);
          } else {
            buildTriggerFlowParams(data.results, [], 'update', body);
          }
        });
      } else {
        buildTriggerFlowParams([], [], 'update', body);
      }
    }

-block modal-extra-style
  {{ block.super }}

  :css
    #languages{
      position: relative;
      text-align: right;
    }

    #schedule-section {
      display: flex;
    }
    
    #message-section {
      display: none;
    }

    #flow-section {
      display: none;
      padding-top:5px;
    }

    #field-offset {
      margin-right: 8px;
      width: 54px;
    }

    #field-unit {
      margin-right: 8px;
    }

    #field-direction {
      margin-right: 8px;
    }

    #field-relative {
      flex-grow: 1;
    }

    #field-hour {
      flex-grow: 1;
    }

    .start-mode-help {
      display: inline-block;
      width:262px;
      margin-bottom: 6px;
    }

    temba-completion {
      margin: 10px 0px 20px 0px;
      --textarea-height: 125px;
    }

    a {
      color: rgb(var(--primary-rgb));
      cursor: pointer;
      text-decoration: none;
    }

    a:hover {
      text-decoration: underline;
    }

    .embedded-data-update {
      margin: 0 0 5px 4px;
      font-weight: 400;
      font-size: 13px;
      letter-spacing: 0.05em;
      line-height: normal;
      color: rgb(119, 119, 119);
    }

    .embed-row {
      display: flex;
    }

    .embed-field-update, .embed-value-update {
      width: 49%;
      margin: 0 5px 5px 0;
    }

    .embed-field-update > input, .embed-value-update > input {
      width: calc(100% - 18px);
      font-size: 13px;
      padding: 9px;
      border-radius: var(--curvature-widget);;
      border: 1px solid var(--color-widget-border);
      color: var(--color-widget-text);
      outline: none;
    }

    .embed-field-update > input:read-only {
      background: #eee;
    }

    .embed-value-update > input:focus {
      background: var(--color-widget-bg-focused);
      border-color: var(--color-focus);
      box-shadow: var(--widget-box-shadow-focused);
    }

    .hidden {
      display: none;
    }



-block fields

  -render_field 'event_type'

  #message-section

    #languages

      -if form.languages|length > 1
        -for field in form.languages
          {%if forloop.counter0 > 0%} | {% endif %}
          -if field.language.name
            %a.show_language{data-iso:"{{field.language.iso_code}}", href:"javascript:void(0);"}><
              {{field.language.name}}

    -for field in form.languages
      .language{class:'{{field.language.iso_code}} {%if forloop.counter0 > 0%}hide{%endif%}'}
        -render_field field.language.iso_code

    #event-message-start-mode
      -render_field 'message_start_mode'

  #flow-section
    -render_field 'flow_to_start'

    #event-flow-start-mode
      -render_field 'flow_start_mode'

  #schedule-section
    #field-offset
      -render_field 'offset'
    #field-unit
      -render_field 'unit'
    #field-direction
      -render_field 'direction'
    #field-relative
      -render_field 'relative_to'

  #send-at.hide
    #field-hour
      -render_field 'delivery_hour'

  #flow-params-section
    %h5.embedded-data-update.hidden
      -trans "Flow Parameters"
    #embedded-data-update.hidden
      #embed-container-update

